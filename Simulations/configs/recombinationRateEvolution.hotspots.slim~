// Keywords: tree-sequence recording, tree sequence recording

initialize() {

//	defineConstant("REP", 1);  // simulation replicate
	defineConstant("N", 5000);  // pop size
	defineConstant("L", 1e7);    // total chromosome length
	defineConstant("r", 6e-6);  // the recombination rate within hotspots
	defineConstant("hotSpotWidth", 5000);  // the recombination rate within hotspots

	initializeTreeSeq();
	initializeMutationRate(0.01/(4*N)/10); // This represents 10% of the rate if the population had theta = 0.01

	numHotspots = rpois(1,120);
	starts = sample(0:(L-hotSpotWidth), numHotspots);
	ends = starts + 4999;
	rec_breaks = sort(c(ends,starts,L-1));
	rec_rates = c(rep( c(r/100, r ), numHotspots),0);


	initializeMutationType("m2", 0.5, "g", -0.1, 0.1);
	initializeGenomicElementType("g2", m2, 1.0);
	initializeRecombinationRate( rec_rates, rec_breaks);
	initializeGenomicElement(g2, 0, L-1);
}
1 {
	sim.addSubpop("p1", N);


	cat("Recombination hotspot locations:\n");
	cat(sim.chromosome.recombinationEndPositions);
	writeFile(paste(c("replicate_", REP,".recombinationHotspots.txt"), sep=""), c("regime_1", asString(sim.chromosome.recombinationEndPositions)) );

}

1:100000 late(){
print(sim.generation + "\n");
}
100000 {
	sim.treeSeqOutput("recombination_regime_1."+REP+".trees");
}

100001 late() {
// Re-draw the recombination hotspots

	numHotspots = rpois(1,120);
	starts = sample(0:(L-hotSpotWidth), numHotspots);
	ends = starts + 4999;
	rec_breaks = sort(c(ends,starts,L-1));
	rec_rates = c(rep( c(r/100, r ), numHotspots),0);

	sim.chromosome.setRecombinationRate(rec_rates,  rec_breaks);

	cat("New recombination hotspot locations:\n");
	cat(sim.chromosome.recombinationEndPositions);

	writeFile(paste(c("replicate_", REP,".recombinationHotspots.txt"), sep=""), c("regime_2", asString(sim.chromosome.recombinationEndPositions)), append = T);

}

100001:150001 late(){
	if (sim.generation % 5000 == 0){
				sim.treeSeqOutput("recombination_regime_2.gen"+sim.generation +".rep"+REP+".trees");

		}
	}
