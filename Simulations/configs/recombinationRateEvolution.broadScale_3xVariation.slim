// Keywords: tree-sequence recording, tree sequence recording

initialize() {

	defineConstant("N", 5000);  // pop size
	defineConstant("L", 1e7);    // total chromosome length
	initializeTreeSeq();
	initializeMutationRate(0.01/(4*N)/10); // This represents 10% of the rate if the population had theta = 0.01

	recRates = c(2.08e-7, 0.5, 2.496e-7, 0.5, 3.328e-7, 0.5, 3.744e-7, 0.5, 4.16e-7, 0.5, 4.16e-7, 0.5, 4.576e-7, 0.5, 4.992e-7, 0.5, 5.824e-7, 0.5, 6.24e-7);

	initializeRecombinationRate(recRates, sort(c((c(seq(1,10)*1000000)-1) , (c(seq(1,9)*1000000)))));

	initializeMutationType("m2", 0.5, "g", -0.1, 0.1);

	initializeGenomicElementType("g2", m2, 1.0);

	initializeGenomicElement(g2, 0, L-1);
}
1 {
	sim.addSubpop("p1", N);
}


100000 {
	sim.treeSeqOutput("recombination_regime_1."+REP+".trees");
}

100001 late() {
	// FliP the recombination map around
	recRates = c(2.08e-7, 0.5, 2.496e-7, 0.5, 3.328e-7, 0.5, 3.744e-7, 0.5, 4.16e-7, 0.5, 4.16e-7, 0.5, 4.576e-7, 0.5, 4.992e-7, 0.5, 5.824e-7, 0.5, 6.24e-7);


	sim.chromosome.setRecombinationRate(rev(recRates), sort(c((c(seq(1,10)*1000000)-1) , (c(seq(1,9)*1000000)))));
	}

100001:150001 late(){
	if (sim.generation % 5000 == 0){
		sim.treeSeqOutput("recombination_regime_2.gen"+sim.generation +".rep"+REP+".trees");

	}
}
