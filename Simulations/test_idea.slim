// Keywords: tree-sequence recording, tree sequence recording

initialize() {

	defineConstant("N", 1000);  // pop size
	defineConstant("L", 1e7);    // total chromosome length
	initializeTreeSeq();
	initializeMutationRate(1e-7);

	r = 2.08e-5;

	starts = sample(0:(L-10000), 60);

	ends = starts + 9999;

	rec_breaks = sort(c(ends,starts,L-1));

	rec_rates = c(rep( c(0, r ), 60),0);
	
	initializeRecombinationRate(c(1e-8, 0.5, 2e-8, 0.5, 3e-8, 0.5, 4e-7, 0.5, 5e-7, 0.5, 6e-7, 0.5, 7e-7, 0.5, 8e-7, 0.5, 9e-7, 0.5, 10e-7), sort(c((c(seq(1,10)*1000000)-1) , (c(seq(1,9)*1000000)))));
	

	initializeMutationType("m2", 0.5, "g", -0.1, 0.1);
	initializeGenomicElementType("g2", m2, 1.0);
	
	initializeGenomicElement(g2, 0, L-1);
}
1 {
	sim.addSubpop("p1", N);

}
1:100000 {
}
30000 {
	sim.treeSeqOutput("recombination_regime_1."+REP+".trees");
}

30001 late() {
// Jack up the recombination rate 10-fold
	sim.chromosome.setRecombinationRate(rev(c(1e-8, 2e-8, 3e-8, 4e-7, 5e-7, 6e-7, 7e-7, 8e-7, 9e-7, 10e-7)), (seq(1,10)*1000000)-1);
}

30000:40000 late(){
	if (sim.generation % 500 == 0){
				sim.treeSeqOutput("recombination_regime_2.gen"+sim.generation +".rep"+REP+".trees");

		}
	}
//s1 10 late() {
//	
//}

// Part II of this recipe, which is a Python script, may be found in
// the Recipes archive downloadable at https://messerlab.org/slim/
