// Keywords: tree-sequence recording, tree sequence recording

initialize() {
	
	defineConstant("N", 1000);  // pop size
	defineConstant("L", 1e7);    // total chromosome length
	initializeTreeSeq();
	initializeMutationRate(1e-7);
	
recRates = c(1.25e-6, 0.5, 1.5e-6, 0.5, 2e-6, 0.5, 2.25e-6, 0.5, 2.5e-6, 0.5, 2.5e-6, 0.5, 2.75e-6, 0.5, 3e-6, 0.5, 3.5e-6, 0.5, 3.75e-6);
	
	initializeRecombinationRate(recRates, sort(c((c(seq(1,10)*1000000)-1) , (c(seq(1,9)*1000000)))));
	
	
	initializeMutationType("m2", 0.5, "g", -0.1, 0.1);
	initializeGenomicElementType("g2", m2, 1.0);
	
	initializeGenomicElement(g2, 0, L-1);
}
1 {
	sim.addSubpop("p1", N);

}
1:100000 {
}
30000 {
	sim.treeSeqOutput("range0.3_recombination_regime_1."+REP+".trees");
}

30001 late() {
	// Jack up the recombination rate 10-fold
	
	
	
recRates = c(1.25e-6, 0.5, 1.5e-6, 0.5, 2e-6, 0.5, 2.25e-6, 0.5, 2.5e-6, 0.5, 2.5e-6, 0.5, 2.75e-6, 0.5, 3e-6, 0.5, 3.5e-6, 0.5, 3.75e-6);
	
	sim.chromosome.setRecombinationRate(rev(recRates), sort(c((c(seq(1,10)*1000000)-1) , (c(seq(1,9)*1000000)))));
	}

30001:40000 late(){
	if (sim.generation % 1000 == 0){
		sim.treeSeqOutput("range0.3_recombination_regime_2.gen"+sim.generation +".rep"+REP+".trees");
	
	}
}
//s1 10 late() {
//	
//}

// Part II of this recipe, which is a Python script, may be found in
// the Recipes archive downloadable at https://messerlab.org/slim/
